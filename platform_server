#!/bin/bash
#
# nubomanagement                Start up the nubo management
#
# chkconfig: 2345 95 25
# description: Nubo platform restful service
#
# processname: nodejs
# pidfile: /var/run/platform_server.pid

### BEGIN INIT INFO
# Provides: platform_server
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start up the nubo management
# Description:       Nubo platform restful service
### END INIT INFO

NUBOROOT=/opt

# source function library
. /lib/lsb/init-functions


RETVAL=0
prog="platform_server"
lockfile=/var/lock/subsys/$prog

# Some functions to make the below more readable
PID_FILE=/var/run/${prog}.pid

runlevel=$(set -- $(runlevel); eval "echo \$$#" )

forever_pid()
{
	PID=`PATH=/usr/bin:$PATH HOME=/root /usr/bin/forever list | awk '/restserver.js/ {print $6}'`
	if [ -n "$PID" ]; then
		echo ${PID} > $PID_FILE
		chmod 644 $PID_FILE > /dev/null
	else
		rm -f "$PID_FILE" > /dev/null 2>&1
	fi
}

start()
{
	if [ -f "$PID_FILE" ]; then
		echo "$prog already run"
		exit 1
	fi
	cd ${NUBOROOT}/${prog}
	log_daemon_msg "Starting $prog: " || true
	PATH=/usr/bin:$PATH HOME=/root /usr/bin/forever --killSignal=SIGINT -s -l /dev/null -a start restserver.js > /dev/null
	cd - > /dev/null
	sleep 1
	forever_pid
	PID=`cat "$PID_FILE"`
	if [ -z "$PID" ]; then
		log_end_msg 1
		RETVAL=1
	else
		ps `cat $PID_FILE` > /dev/null && log_end_msg 0 || log_end_msg 1
		RETVAL=$?
	fi
	return $RETVAL
}

stop()
{
	log_daemon_msg "Stopping $prog: " || true
	if [ ! -f "$PID_FILE" ]; then
		# not running; per LSB standards this is "ok"
		log_end_msg 1 || true
			return 0
	fi
	cd ${NUBOROOT}/${prog}
	PATH=/usr/bin:$PATH HOME=/root /usr/bin/forever stop restserver.js > /dev/null
	cd - > /dev/null
	forever_pid
	PID=`cat "$PID_FILE" 2>/dev/null`
	if [ -n "$PID" ]; then
		log_end_msg 1
		RETVAL=1
	else
		 # failed to read pidfile - it is good
		log_end_msg 0
	fi
	rm -f "$PID_FILE"
	return $RETVAL
}

restart() {
	stop
	start
}

#status() {
#	ps `cat $PID_FILE` > /dev/null
#	exit $?
#}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart)
		restart
		;;
	reload)
		reload
		;;
	status)
		forever_pid
		status_of_proc -p $PID_FILE $prog $prog && exit 0 || exit $?
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|status}"
		RETVAL=2
esac
exit $RETVAL
